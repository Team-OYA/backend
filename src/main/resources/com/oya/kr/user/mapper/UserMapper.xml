<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.oya.kr.user.mapper.UserMapper">

    <!-- @author 이상민 -->
    <!-- @since 2024.02.16-->

    <insert id="insertUser" parameterType="SignupUserRequest">
        {call create_user_and_business(
                #{nickname, mode=IN, jdbcType=VARCHAR},
                #{email, mode=IN, jdbcType=VARCHAR},
                #{password, mode=IN, jdbcType=VARCHAR},
                TO_DATE('${birthDate}', 'YYYY-MM-DD'),
                #{gender, mode=IN, jdbcType=VARCHAR},
                #{registrationType, mode=IN, jdbcType=VARCHAR},
                #{userType, mode=IN, jdbcType=VARCHAR},
                #{businessRegistrationNumber, mode=IN, jdbcType=VARCHAR},
                #{profileUrl, mode=IN, jdbcType=VARCHAR},
                #{nameOfCompany, mode=IN, jdbcType=VARCHAR},
                #{nameOfRepresentative, mode=IN, jdbcType=VARCHAR},
                TO_DATE('${dateOfBusinessCommencement}', 'YYYY-MM-DD'),
                #{businessItem, mode=IN, jdbcType=VARCHAR},
                #{connectedNumber, mode=IN, jdbcType=VARCHAR},
                #{faxNumber, mode=IN, jdbcType=VARCHAR},
                #{zipCode, mode=IN, jdbcType=VARCHAR},
                #{businessAddress, mode=IN, jdbcType=VARCHAR}
              )}
    </insert>

    <insert id="insertAdminAndKakaoUser" parameterType="signupBasicMapperRequest">
        INSERT INTO users (EMAIL, NICKNAME, PASSWORD, BIRTH_DATE, GENDER, REGISTRATION_TYPE, USER_TYPE, PROFILE_URL)
        VALUES (#{email},
                #{nickname},
                #{password, jdbcType=VARCHAR},
                #{birthDate, jdbcType=DATE},
                #{gender, jdbcType=VARCHAR},
                #{registrationType, jdbcType=VARCHAR},
                #{userType, jdbcType=VARCHAR},
                #{profileUrl, jdbcType=VARCHAR})
    </insert>

    <select id="duplicatedEmail" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM USERS
        WHERE EMAIL = #{email}
    </select>

    <select id="duplicatedNickname" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM USERS
        WHERE NICKNAME = #{email}
    </select>

    <select id="countUser" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM USERS
        WHERE USER_TYPE = #{type}
    </select>

    <select id="findByEmail" resultType="userMapperResponse">
        SELECT ID,
               NICKNAME,
               EMAIL,
               PASSWORD,
               BIRTH_DATE,
               GENDER,
               REGISTRATION_TYPE,
               USER_TYPE,
               BUSINESS_REGISTRATION_NUMBER,
               PROFILE_URL,
               CREATED_DATE,
               MODIFIED_DATE,
               DELETED
        FROM USERS
        WHERE EMAIL = #{email}
    </select>

    <delete id="deleteAll">
        DELETE
        FROM USERS
    </delete>

    <select id="findById" resultType="userMapperResponse">
        SELECT ID,
               NICKNAME,
               EMAIL,
               PASSWORD,
               BIRTH_DATE,
               GENDER,
               REGISTRATION_TYPE,
               USER_TYPE,
               BUSINESS_REGISTRATION_NUMBER,
               PROFILE_URL,
               CREATED_DATE,
               MODIFIED_DATE,
               DELETED
        FROM USERS
        WHERE ID = #{userId}
    </select>

    <delete id="deleteFromUserId">
        DELETE FROM USERS
        WHERE ID = #{userId}
    </delete>

    <resultMap id="basicMapperResponse" type="com.oya.kr.user.mapper.dto.response.BasicMapperResponse">
        <result property="userId" column="userId"/>
        <result property="nickname" column="nickname"/>
        <result property="email" column="email"/>
        <result property="birthDate" column="birth_date"/>
        <result property="gender" column="gender"/>
        <result property="userType" column="user_type"/>
        <result property="profileUrl" column="profile_url"/>
        <result property="userCreatedDate" column="created_date"/>
        <result property="userModifiedDate" column="modified_date"/>
        <result property="userDeleted" column="deleted"/>
        <result property="communityCount" column="communityCount"/>
    </resultMap>

    <resultMap id="businessMapperResponse" type="com.oya.kr.user.mapper.dto.response.BusinessMapperResponse" extends="basicMapperResponse">
        <result property="businessId" column="businessId"/>
        <result property="nameOfCompany" column="nameOfCompany"/>
        <result property="nameOfRepresentative" column="nameOfRepresentative"/>
        <result property="dateOfBusinessCommencement" column="dateOfBusinessCommencement"/>
        <result property="businessItem" column="businessItem"/>
        <result property="connectedNumber" column="connectedNumber"/>
        <result property="faxNumber" column="faxNumber"/>
        <result property="zipCode" column="zipCode"/>
        <result property="businessAddress" column="businessAddress"/>
        <result property="planCount" column="planCount"/>
        <result property="popupCount" column="popupCount"/>
        <result property="businessRegistrationNumber" column="business_registration_number"/>
    </resultMap>

    <select id="findByBasic" resultMap="basicMapperResponse" resultType="com.oya.kr.user.mapper.dto.response.BasicMapperResponse"
            parameterType="com.oya.kr.user.mapper.dto.request.FindByUserMapperRequest">
        SELECT
        U.ID as userId, U.NICKNAME, U.EMAIL, U.BIRTH_DATE, U.GENDER, U.REGISTRATION_TYPE, U.USER_TYPE,
        U.PROFILE_URL, U.CREATED_DATE, U.MODIFIED_DATE, U.DELETED,
        COUNT(C.ID) AS communityCount
        FROM USERS U
        LEFT JOIN COMMUNITY C ON U.ID = C.WRITE_ID
        <where>
            <if test="userId != null">
                AND U.ID = #{userId}
            </if>
            AND U.USER_TYPE = 'user'
        </where>
        GROUP BY
        U.ID, U.NICKNAME, U.EMAIL, U.BIRTH_DATE, U.GENDER, U.REGISTRATION_TYPE, U.USER_TYPE,
        U.PROFILE_URL, U.CREATED_DATE, U.MODIFIED_DATE, U.DELETED
        ORDER BY U.CREATED_DATE DESC
        <include refid="offsetForPaging" />
    </select>

    <select id="findByBusiness" resultMap="businessMapperResponse" parameterType="com.oya.kr.user.mapper.dto.request.FindByUserMapperRequest">
        SELECT
        U.ID as userId, U.NICKNAME, U.EMAIL, U.BIRTH_DATE, U.GENDER, U.REGISTRATION_TYPE, U.USER_TYPE,
        U.PROFILE_URL, U.CREATED_DATE, U.MODIFIED_DATE, U.DELETED,
        U.BUSINESS_REGISTRATION_NUMBER,
        B.ID as businessId,B.NAME_OF_COMPANY,B.NAME_OF_REPRESENTATIVE,B.DATE_OF_BUSINESS_COMMENCEMENT,
        B.BUSINESSITEM,B.CONNECTED_NUMBER,B.FAX_NUMBER,B.ZIP_CODE,B.BUSINESS_ADDRESS, U.BUSINESS_REGISTRATION_NUMBER,
        COUNT(C.ID) as communityCount,
        COUNT(P.ID) as planCount,
        COUNT(PP.ID) as popupCount
        FROM
        USERS U
        LEFT JOIN BUSINESS B ON U.ID = B.USER_ID
        LEFT JOIN COMMUNITY C ON U.ID = C.WRITE_ID
        LEFT JOIN PLAN P ON B.ID = P.USER_ID
        LEFT JOIN POPUP pp ON P.ID = pp.PLAN_ID
        <where>
            <if test="userId != null">
                AND U.ID = #{userId}
            </if>
            AND U.USER_TYPE = 'business'
        </where>
        GROUP BY
        U.ID, U.NICKNAME, U.EMAIL, U.BIRTH_DATE, U.GENDER, U.REGISTRATION_TYPE, U.USER_TYPE,
        U.PROFILE_URL, U.CREATED_DATE, U.MODIFIED_DATE, U.DELETED,
        U.BUSINESS_REGISTRATION_NUMBER,
        B.ID,B.NAME_OF_COMPANY,B.NAME_OF_REPRESENTATIVE,B.DATE_OF_BUSINESS_COMMENCEMENT,
        B.BUSINESSITEM,B.CONNECTED_NUMBER,B.FAX_NUMBER,B.ZIP_CODE,B.BUSINESS_ADDRESS, U.BUSINESS_REGISTRATION_NUMBER
        ORDER BY U.CREATED_DATE DESC
        <include refid="offsetForPaging" />
    </select>

    <select id="findMeForAb" resultType="adUserDetailMapperResponse">
        SELECT U.ID, NICKNAME, EMAIL, BUSINESS_REGISTRATION_NUMBER, CONNECTED_NUMBER
        FROM USERS U
            JOIN BUSINESS B
                ON U.ID = B.USER_ID
        WHERE U.ID = #{userId}
    </select>

    <sql id="offsetForPaging">
        OFFSET #{pageNo} ROWS FETCH NEXT #{amount} ROWS ONLY
    </sql>

</mapper>
